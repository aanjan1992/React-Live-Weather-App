{"version":3,"sources":["component/Weathercard.js","component/Weather.js","App.js","index.js"],"names":["Weathercard","tempInfo","background","cityLookup","temp","humidity","pressure","weatherMood","name","speed","country","sunset","useState","weatherState","setWeatheState","useEffect","date","Date","timestr","getHours","getMinutes","className","style","toLocaleString","timeZone","Weather","city","setCity","settempInfo","toLocaleTimeString","timeNow","setTimeNow","setCityLookup","setBackground","getWeatherInfo","axios","url","method","headers","then","response","data","main","weather","wind","sys","myWeatherInfo","cityTimezones","lookupViaCity","timezone","parseInt","substr","document","title","toUpperCase","catch","error","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.057ce7b3.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react';\r\n\r\n\r\n\r\nfunction Weathercard({tempInfo, background, cityLookup}) {\r\n    \r\n    const {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weatherMood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset\r\n    } = tempInfo;\r\n\r\n    const [weatherState, setWeatheState] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if (weatherMood) {\r\n            if (background === \"#191970\"){\r\n                switch (weatherMood) {\r\n                    case \"Clouds\":\r\n                    setWeatheState(\"wi-cloudy\");\r\n                    break;\r\n                    case \"Haze\":\r\n                    setWeatheState(\"wi-fog\");\r\n                    break;\r\n                    case \"Clear\":\r\n                    setWeatheState(\"wi-moon-waning-crescent-5\");\r\n                    break;\r\n                    case \"Mist\":\r\n                    setWeatheState(\"wi-dust\");\r\n                    break;\r\n                    case \"Rain\":\r\n                    setWeatheState(\"wi-rain\");\r\n                    break;\r\n                    case \"Snow\":\r\n                    setWeatheState(\"wi-snow\");\r\n                    break;\r\n                    case \"Lightning\":\r\n                    setWeatheState(\"wi-Lightning\");\r\n                    break;\r\n                    case \"Thunderstorm\":\r\n                    setWeatheState(\"wi-Thunderstorm\");\r\n                    break;\r\n\r\n                    default:\r\n                    setWeatheState(\"wi-day-sunny\");\r\n                    break;\r\n                }\r\n            }else{\r\n                switch (weatherMood) {\r\n                    case \"Clouds\":\r\n                    setWeatheState(\"wi-cloudy\");\r\n                    break;\r\n                    case \"Haze\":\r\n                    setWeatheState(\"wi-fog\");\r\n                    break;\r\n                    case \"Clear\":\r\n                    setWeatheState(\"wi-day-sunny\");\r\n                    break;\r\n                    case \"Mist\":\r\n                    setWeatheState(\"wi-dust\");\r\n                    break;\r\n                    case \"Snow\":\r\n                    setWeatheState(\"wi-snow\");\r\n                    break;\r\n                    case \"Lightning\":\r\n                    setWeatheState(\"wi-Lightning\");\r\n                    break;\r\n                    case \"Thunderstorm\":\r\n                    setWeatheState(\"wi-Thunderstorm\");\r\n                    break;\r\n\r\n                    default:\r\n                    setWeatheState(\"wi-day-sunny\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    }, [weatherMood,background]);\r\n\r\n\r\n    let sec = sunset;\r\n    let date = new Date(sec*1000);\r\n    let timestr = `${date.getHours()}:${date.getMinutes()}`\r\n    return (\r\n        <>\r\n           <article className=\"widget noselect\">\r\n                    <div className=\"weatherIcon\" style={{background}}>\r\n                        <i className={`wi u ${weatherState}`}></i>\r\n                    </div>\r\n                    <div className=\"weatherInfo\">\r\n                        <div className=\"temperature\">\r\n                            <span>{temp}&deg;</span>\r\n                        </div>\r\n                        <div className=\"description\">\r\n                            <div className=\"weatherCondition\">{weatherMood}</div>\r\n                            <div className=\"place\">{name}, {country}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"date\">{new Date().toLocaleString(\"en-US\", {timeZone : cityLookup }) }</div>\r\n                    <div className=\"extra-temp\">\r\n                        <div className=\"temp-info-minmax\">\r\n                            <div className=\"two-sided-section\">\r\n                                <p>\r\n                                    <i className={\"wi wi-sunset\"}></i>\r\n                                </p>\r\n                                <p className=\"extra-info-leftside\">\r\n                                    {timestr} <br />\r\n                                    Sunset\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"two-sided-section\">\r\n                                <p>\r\n                                    <i className={\"wi wi-humidity\"}></i>\r\n                                </p>\r\n                                <p className=\"extra-info-leftside\">\r\n                                    {humidity}% <br />\r\n                                    Humidity\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"weather-extra-info\">\r\n                            <div className=\"two-sided-section\">\r\n                                <p>\r\n                                    <i className={\"wi wi-rain\"}></i>\r\n                                </p>\r\n                                <p className=\"extra-info-leftside\">\r\n                                    {pressure} <br />\r\n                                    Pressure\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"two-sided-section\">\r\n                                <p>\r\n                                    <i className={\"wi wi-strong-wind\"}></i>\r\n                                </p>\r\n                                <p className=\"extra-info-leftside\">\r\n                                   {speed} <br />\r\n                                    Wind\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </article> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Weathercard\r\n","import React,{useState, useEffect} from 'react'\r\nimport axios from \"axios\";\r\nimport cityTimezones from \"city-timezones\";\r\nimport Weathercard from './Weathercard';\r\n\r\nfunction Weather() {\r\n    const [city, setCity] = useState(\"kolkata\")\r\n    const [tempInfo, settempInfo] = useState({})\r\n    // time differentlocation\r\n    const [timeNow, setTimeNow] = useState(new Date().toLocaleTimeString(\"en-GB\"));\r\n    const [cityLookup, setCityLookup] = useState(\"Asia/Kolkata\")\r\n    const [background, setBackground] = useState(\"\")\r\n    const getWeatherInfo = () => {\r\n        axios(\r\n            {\r\n                url: `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=f610b69b3c6d7eb99d61f54215f3362e\r\n                `,\r\n                method: 'GET',\r\n                headers : { 'Content-Type':'application/json' }\r\n            }\r\n        ).then(\r\n            response => {\r\n                const data = response.data;\r\n                const {temp, humidity, pressure } = data.main;\r\n                const {main: weatherMood} = data.weather[0];\r\n                const {name} = data;\r\n                const {speed} = data.wind;\r\n                const {country, sunset} = data.sys;\r\n\r\n                const myWeatherInfo = {\r\n                    temp,\r\n                    humidity,\r\n                    pressure,\r\n                    weatherMood,\r\n                    name,\r\n                    speed,\r\n                    country,\r\n                    sunset\r\n                }\r\n                // background change\r\n                \r\n                setCityLookup(cityTimezones.lookupViaCity(myWeatherInfo.name)[0].timezone);\r\n                setTimeNow(new Date().toLocaleTimeString('en-GB', {timeZone : cityLookup }))\r\n                if (parseInt(timeNow.substr(0,2)) <= 5 || parseInt(timeNow.substr(0,2)) >= 18){\r\n                      setBackground(\"#191970\")\r\n                      }\r\n                else{\r\n                      setBackground(\"#fafafa\")\r\n                }\r\n                // background change\r\n                settempInfo(myWeatherInfo)\r\n                document.title = `${city.toUpperCase()} Weather`\r\n                \r\n            }\r\n        ).catch((error) => {console.log(error)})\r\n    }\r\n    useEffect(() => {\r\n        getWeatherInfo();\r\n    },[city,timeNow,background])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"wrap\">\r\n                    <div className=\"search\">\r\n                        <input type=\"search\" placeholder=\"Search city...\" className=\"searchTerm\" autoFocus id=\"search\"\r\n                            value={city} onChange={(e)=>{setCity(e.target.value)}}\r\n                        />\r\n                        <button className=\"searchButton\" onClick={getWeatherInfo}>Search</button>\r\n                    </div>\r\n                </div>\r\n                <Weathercard tempInfo = {tempInfo} background = {background} cityLookup = {cityLookup}/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react'\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './component/style.css';\nimport Weather from './component/Weather';\n\nfunction App() {\n  return (\n    <>\n      <Weather />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}